buildscript {
    repositories {
        maven { url = "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1" }
        maven { url "https://maven.minecraftforge.net" }
        maven { url 'https://repo.spongepowered.org/maven'}
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
        classpath "org.spongepowered:mixingradle:0.6-SNAPSHOT"
    }
}

plugins {
    id "java"
    id "com.github.johnrengelman.shadow" version "2.0.4"
}

apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: 'org.spongepowered.mixin'


// PKPrac - Parkour Practice Mod for Minecraft 1.8.9
// Built with ForgeGradle 2.1 for compatibility
version = "1.0.4"
group= "com.xekek.pkprac" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "PKPrac"
sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {
    version = "1.8.9-11.15.1.2318-1.8.9"
    runDir = "run"

    // DevAuth for development (optional - comment out if not using)
    clientJvmArgs += ["-Ddevauth.enabled=true", "-Ddevauth.account=main"]

    // Stable mappings for reliable builds
    mappings = "stable_22"
    makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

configurations {
    shade
    compile.extendsFrom(shade)
}

repositories {
    maven { url 'https://repo.spongepowered.org/maven/' }
}

def systemOs = System.getProperty("os.name").toLowerCase(Locale.ENGLISH)

dependencies {
    // DevAuth for development authentication (optional)
//    compile files('libs/DevAuth-forge-legacy-1.2.1.jar')

    shade('org.spongepowered:mixin:0.7.10-SNAPSHOT') {
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
        exclude module: 'log4j-core'
    }
    if (systemOs.contains("mac")) {
        compile 'org.lwjgl.lwjgl:lwjgl_util:2.9.4-nightly-20150209'
        compile 'org.lwjgl.lwjgl:lwjgl:2.9.4-nightly-20150209'
        compile 'org.lwjgl.lwjgl:lwjgl-platform:2.9.4-nightly-20150209'
    } else if (systemOs.contains("linux")) {
        compile 'org.lwjgl.lwjgl:lwjgl_util:2.9.4-nightly-20150209'
        compile 'org.lwjgl.lwjgl:lwjgl:2.9.4-nightly-20150209'
        compile 'org.lwjgl.lwjgl:lwjgl-platform:2.9.4-nightly-20150209'
    }
}

if (systemOs.contains("mac")) {
    configurations.all {
        resolutionStrategy {
            dependencySubstitution {
                substitute module('org.lwjgl.lwjgl:lwjgl_util:2.9.2-nightly-201408222') with module('org.lwjgl.lwjgl:lwjgl_util:2.9.4-nightly-20150209')
                substitute module('org.lwjgl.lwjgl:lwjgl:2.9.2-nightly-201408222') with module('org.lwjgl.lwjgl:lwjgl:2.9.4-nightly-20150209')
            }
            force 'org.lwjgl.lwjgl:lwjgl-platform:2.9.4-nightly-20150209'
        }
    }
} else if (systemOs.contains("linux")) {
    configurations.all {
        resolutionStrategy {
            dependencySubstitution {
                substitute module('org.lwjgl.lwjgl:lwjgl_util:2.9.4-nightly-20150209') with module('org.lwjgl.lwjgl:lwjgl_util:2.9.4-nightly-20150209')
                substitute module('org.lwjgl.lwjgl:lwjgl:2.9.4-nightly-20150209') with module('org.lwjgl.lwjgl:lwjgl:2.9.4-nightly-20150209')
            }
            force 'org.lwjgl.lwjgl:lwjgl-platform:2.9.4-nightly-20150209'
        }
    }
}


processResources
        {
            // this will ensure that this task is redone when the versions change.
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft.version

            // replace stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                // replace version and mcversion
                expand 'version':project.version, 'mcversion':project.minecraft.version
            }

            // copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }

            rename '(.+_at.cfg)', 'META-INF/$1'
        }

// Shadow plugin configuration
shadowJar {
    dependencies {}
    configurations = [project.configurations.shade]
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
    classifier ""
}

reobf {
    shadowJar {}
}


jar {
    manifest.attributes(
            "FMLCorePlugin" : "com.xekek.pkprac.mixins.MixinLoader",
            "ForceLoadAsMod": true,
            "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
            "TweakOrder": 0,
            "ModSide": "CLIENT",
            'FMLCorePluginContainsFMLMod': true,
            'MixinConfigs': 'mixins.pkprac.json'
    )
}

sourceSets {
    main {
        ext.refMap = "mixins.pkprac.refmap.json"
    }
}
task buildCopyToRunModsAndRun(type: Copy, dependsOn: 'build') {
    from "build/libs"
    into "run/mods"
    include "*.jar"
}
buildCopyToRunModsAndRun.finalizedBy runClient